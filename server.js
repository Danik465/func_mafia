const express = require("express");
const { WebSocketServer } = require("ws");
const path = require("path");

const app = express();
const PORT = 8080;
const AUTH_TOKEN = "123"; // –ü–∞—Ä–æ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

// –í server.js –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞:

// –†–∞–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–ø–æ–∫
app.use("/css", express.static(path.join(__dirname, "css")));
app.use("/scripts", express.static(path.join(__dirname, "scripts")));
app.use(express.static(path.join(__dirname))); // –î–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤

// –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è HTML —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
app.get("/control.html", (req, res) => {
  res.sendFile(path.join(__dirname, "control.html"));
});

app.get("/overlay.html", (req, res) => {
  res.sendFile(path.join(__dirname, "overlay.html"));
});

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "control.html"));
});

const server = app.listen(PORT, "0.0.0.0", () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –ø–ª–∞—à–µ–∫ –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
  console.log(`‚úÖ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: http://localhost:${PORT}/control.html`);
  console.log(`‚úÖ –û–≤–µ—Ä–ª–µ–π: http://localhost:${PORT}/overlay.html`);
});

const wss = new WebSocketServer({ server });


// –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º (–æ–≤–µ—Ä–ª–µ—è–º)
wss.clients.forEach((client) => {
  if (client !== ws && client.readyState === 1) {  // ‚Üê –ü–†–û–ë–õ–ï–ú–ê: –∏—Å–∫–ª—é—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    client.send(JSON.stringify(data));
  }
});


// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞—à–µ–∫
const platesState = {};
for (let i = 1; i <= 10; i++) {
  platesState[i] = {
    name: "",
    color: "default",
    role: null,
    status: null,
    mafiaCards: { red: false, gray: false, yellow: false }
  };
}

wss.on("connection", (ws) => {
  ws.isAuthorized = false;

  ws.on("message", (msg) => {
    let data;
    try {
      data = JSON.parse(msg.toString());
    } catch {
      return;
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if (data.type === "auth") {
      if (data.token === AUTH_TOKEN) {
        ws.isAuthorized = true;
        ws.send(JSON.stringify({ type: "auth_ok" }));
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
        ws.send(JSON.stringify({ 
          type: "initial_state", 
          state: platesState 
        }));
      } else {
        ws.send(JSON.stringify({ type: "auth_fail" }));
        ws.close();
      }
      return;
    }

    // –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å
    if (!ws.isAuthorized) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    switch (data.type) {
      case "set_name":
        platesState[data.cardId].name = data.name;
        break;
        
      case "set_color":
        platesState[data.cardId].color = data.color;
        break;
        
      case "set_role":
        platesState[data.cardId].role = data.role;
        break;
        
      case "set_status":
        platesState[data.cardId].status = data.status;
        break;
        
      case "set_mafia_card":
        platesState[data.cardId].mafiaCards[data.cardType] = data.visible;
        break;
        
      case "reset_card":
        resetSingleCard(data.cardId);
        break;
        
      case "reset_all":
        for (let i = 1; i <= 10; i++) {
          resetSingleCard(i);
        }
        break;
    }

    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º (–æ–≤–µ—Ä–ª–µ—è–º)
    wss.clients.forEach((client) => {
      if (client !== ws && client.readyState === 1) {
        client.send(JSON.stringify(data));
      }
    });

    console.log(`üì¢ –ö–æ–º–∞–Ω–¥–∞: ${data.type} –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${data.cardId || 'all'}`);
  });

  // –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –æ–≤–µ—Ä–ª–µ—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (!ws.isAuthorized) {
    ws.send(JSON.stringify({ 
      type: "initial_state", 
      state: platesState 
    }));
  }
});

function resetSingleCard(cardId) {
  platesState[cardId] = {
    name: "",
    color: "default",
    role: null,
    status: null,
    mafiaCards: { red: false, gray: false, yellow: false }
  };
}

